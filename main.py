import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from gigachat import GigaChat
from gigachat.models import Messages, MessagesRole, Chat
from data_base import start_message
from keyboards import main_menu, get_submenu, menus, start_keyboard


# === –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ===
BOT_TOKEN = "7657081669:AAGj_PB37i0XdNxPxIrGPSEq43CPAtEUUto"
# Auth token
GIGACHAT_TOKEN = "ODVlZjU1NmUtZTJhNi00YTEwLTg3MGEtMWJlYjdjMWVhZDRiOmU1ZTE4YmZiLTI2MzYtNDkzNC04ZDk4LWE4OGYxODY0ZWQ0NQ=="

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

# === –ì–ª–æ–±–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç —Å —Å–∏—Å—Ç–µ–º–Ω—ã–º –ø—Ä–æ–º–ø—Ç–æ–º ===

with open('db.txt', 'r', encoding='utf-8') as file:
    data = file.read()
    print(data)

system_prompt = Messages(
    role=MessagesRole.SYSTEM,
    content=data,
)

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∏–∞–ª–æ–≥–æ–≤ –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º (–∫–æ–Ω—Ç–µ–∫—Å—Ç –æ—Ç–¥–µ–ª—å–Ω–æ –Ω–∞ –∫–∞–∂–¥–æ–≥–æ)
user_sessions = {}

# –°—Ç–∞—Ä—Ç–æ–≤—ã–π —Ö–µ–Ω–¥–ª–µ—Ä

@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    user_id = message.from_user.id

    # –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π —á–∞—Ç —Å —Å–∏—Å—Ç–µ–º–Ω—ã–º –ø—Ä–æ–º–ø—Ç–æ–º
    user_sessions[user_id] = Chat(messages=[system_prompt])

    await message.answer(start_message, reply_markup=main_menu())


async def write_to_file(text: str):
    # –û—Ç–∫—Ä—ã–≤–∞–µ–º —Ñ–∞–π–ª –≤ —Ä–µ–∂–∏–º–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∏ –∑–∞–ø–∏—Å—ã–≤–∞–µ–º —Å—Ç—Ä–æ–∫—É —Å –ø–µ—Ä–µ–≤–æ–¥–æ–º —Å—Ç—Ä–æ–∫–∏
    with open('db.txt', 'a', encoding='utf-8') as f:
        f.write('\n' + text )

# –•–µ–Ω–¥–ª–µ—Ä –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ
@dp.message(lambda message: message.text.lower().startswith('–º–µ—Ä–æ–ø—Ä–∏—è'))
async def handle_meropriyatie(message):
    await write_to_file('\n –î–æ–±–∞–≤—å —ç—Ç–æ—Ç —Ç–µ–∫—Å—Ç –≤ –¥–∞–Ω–Ω—ã–µ –∫–æ –≤—Å–µ–º —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º –≤ –ø–æ–ª–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –µ—Å–ª–∏ –≤ –ø–æ–ª–µ –µ—Å—Ç—å –¥—Ä—É–≥–æ–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ   –≤–æ—Ç —Ç–µ–∫—Å—Ç –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:    ' + message.text)
    await message.answer('–º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ')

# –•–µ–Ω–¥–ª–µ—Ä –Ω–∞ —Å–æ–±—ã—Ç–∏–µ
@dp.message(lambda message: message.text.lower().startswith('—Å–æ–±—ã—Ç–∏'))
async def handle_sobyitie(message):
    await write_to_file('\n –î–æ–±–∞–≤—å —ç—Ç–æ—Ç —Ç–µ–∫—Å—Ç –≤ –¥–∞–Ω–Ω—ã–µ –∫–æ –≤—Å–µ–º —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º –≤ –ø–æ–ª–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –µ—Å–ª–∏ –≤ –ø–æ–ª–µ –µ—Å—Ç—å –¥—Ä—É–≥–æ–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ   –≤–æ—Ç —Ç–µ–∫—Å—Ç –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:    ' + message.text)
    await message.answer('—Å–æ–±—ã—Ç–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ')

# –•–µ–Ω–¥–µ—Ä –¥–ª—è –æ–±—â–µ–Ω–∏—è —Å –ò–ò
@dp.message()
async def handle_message(message: types.Message):
    user_id = message.from_user.id
    user_input = message.text

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —á–∞—Ç–∞, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–∏—à–µ—Ç –≤–ø–µ—Ä–≤—ã–µ
    if user_id not in user_sessions:
        user_sessions[user_id] = Chat(messages=[system_prompt])

    payload = user_sessions[user_id]

    # –ï—Å–ª–∏ –±–æ—Ç –ø–µ—Ä–µ—Å—Ç–∞–Ω–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –∑–Ω–∞—á–∏—Ç –∫–æ–Ω—á–∏–ª–∏—Å—å —Ç–æ–∫–µ–Ω—ã –Ω—É–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å model='GigaChat-2-Max' –Ω–∞ 'GigaChat-2-Pro'
    try:
        with GigaChat(credentials=GIGACHAT_TOKEN, verify_ssl_certs=False, model='GigaChat-2-Max') as giga: #model='GigaChat-2-Pro' #
            # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            payload.messages.append(Messages(role=MessagesRole.USER, content=user_input))

            # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç GigaChat
            response = giga.chat(payload)

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
            reply_msg = response.choices[0].message
            payload.messages.append(reply_msg)

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            await message.answer(reply_msg.content)

    except Exception as e:
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.")
        print("Unexpected error:", e)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π
@dp.callback_query()
async def handle_callback(callback):
    data = callback.data

    responses = {
        "search_name": "üîç –í–≤–µ–¥–∏—Ç–µ –∏–º—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞:",
        "search_dept": "üè¢ –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –æ—Ç–¥–µ–ª–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞::",
        "search_proj": "üìÅ –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞::",
        "events_calendar": "üìÖ –í–≤–µ–¥–∏—Ç–µ '–ü–æ–∫–∞–∂–∏ –±–ª–∏–∂–∞–π—à–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è'",
        "birthdays": "üéÇ –í–≤–µ–¥–∏—Ç–µ '–ü–æ–∫–∞–∂–∏ –±–ª–∏–∂–∞–π—à–∏–µ –¥–Ω–∏ —Ä–æ–∂–¥–µ–Ω–∏—è'",
        "propose_event": "‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ '–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ' –∏ –¢–µ–∫—Å—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω–æ–≥–æ –≤–∞–º–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è",
        "my_tasks": "üìÜ –í–≤–µ–¥–∏—Ç–µ '–ü–æ–∫–∞–∂–∏ –±–ª–∏–∂–∞–π—à–∏–µ –∑–∞–¥–∞—á–∏'",
        "reminders": "‚è∞ –í–≤–µ–¥–∏—Ç–µ '–ø–æ–∫–∞–∂–∏ –∏–º–µ—é—â–∏–µ—Å—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è'",
        "colleagues_busy": "üóìÔ∏è –í–≤–µ–¥–∏—Ç–µ '–∑–∞–Ω—è—Ç–æ—Å—Ç—å –∏–≤–∞–Ω–∞'",
        "view_calendar": "üì• –í–≤–µ–¥–∏—Ç–µ '–∫–∞–∫–æ–π –∫–∞–ª–µ–Ω–¥–∞—Ä—å –Ω–∞ —Å–µ–≥–æ–¥–Ω—è'",
        "add_event": "üì§ –í–≤–µ–¥–∏—Ç–µ '–°–æ–±—ã—Ç–∏–µ' –∏ –¢–µ–∫—Å—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω–æ–≥–æ –≤–∞–º–∏ –°–æ–±—ã—Ç–∏—è",
        "find_lunch": "üçΩÔ∏è –í–≤–µ–¥–∏—Ç–µ '–∫—Ç–æ —Å–µ–π—á–∞—Å –æ–±–µ–¥–∞–µ—Ç'",
        "find_game": "üéÆ –í–≤–µ–¥–∏—Ç–µ '–∫—Ç–æ —Å–µ–π—á–∞—Å —Å–≤–æ–±–æ–¥–µ–Ω –¥–ª—è –∏–≥—Ä—ã'",
        "edit_profile": "üß© –ù–∞–ø–∏—à–∏—Ç–µ —á—Ç–æ –±—ã –≤—ã —Ö–æ—Ç–µ–ª–∏ –∏–∑–º–µ–Ω–∏—Ç—å –≤ –ø—Ä–æ—Ñ–∏–ª–µ",
    }

    if data == "main_menu":
        await callback.message.edit_text("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=main_menu())

    elif data in menus:
        await callback.message.edit_text("üìÇ –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=get_submenu(data))

    elif data in responses:
        await callback.message.answer(responses[data], reply_markup=main_menu())
        await callback.answer()  # –£–±–∏—Ä–∞–µ–º "—á–∞—Å–∏–∫–∏"

    elif data == "menu_ai":
        await callback.message.answer("‚úçÔ∏è –ù–∞–ø–∏—à–∏ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å, —è –ø–æ–¥–∫–ª—é—á–∞—é—Å—å –∫ AI –∏ –≤—Å—ë –Ω–∞–π–¥—É.")
        await callback.answer()
    # else:
    #     await callback.answer("‚è≥ –§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.")

async def main():
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
